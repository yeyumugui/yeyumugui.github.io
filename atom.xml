<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-02T06:57:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>夜雨暮归</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工作中的搜索</title>
    <link href="http://yoursite.com/2019/02/02/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2019/02/02/工作中的搜索/</id>
    <published>2019-02-02T06:55:39.390Z</published>
    <updated>2019-02-02T06:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="button子元素在IE下无法触发点击事件"><a href="#button子元素在IE下无法触发点击事件" class="headerlink" title="button子元素在IE下无法触发点击事件"></a>button子元素在IE下无法触发点击事件</h2><p><a href="https://stackoverflow.com/questions/26402033/missing-click-event-for-span-inside-button-element-on-firefox" target="_blank" rel="noopener">Missing click event for \<span> inside \<button> element on firefox</button></span></a></p><p>button元素不是子元素的容器，所以无法添加子元素，只能添加文本。</p><h1 id="DOM0、DOM1、DOM2级事件"><a href="#DOM0、DOM1、DOM2级事件" class="headerlink" title="DOM0、DOM1、DOM2级事件"></a>DOM0、DOM1、DOM2级事件</h1><p>DOM(Document Object Model，文档对象模型)是针对HTML文档和XML文档的一个API。DOM描绘了一个层次化的节点树，允许开发人员添加、移出和修改页面的某一部分，DOM 脱胎于Netscape 及微软公司创始的 DHTML（动态HTML）。但现在它已经成为表现和操作页面标记的真正跨平台、语言中立的方式。</p><p>Netscape Navigator 4 和 IE4 分别发布于 1997 年的 6 月和 10 月发布的 DHTML，由于 IE4 和 Netscape Navigator4 分别支持不同的 DHTML，为了统一标准，W3C开始制定 DOM。1998 年10 月 W3C 总结了 IE 和 Navigator4 的规范，制定了 DOMLevel 1即 DOM1，之前 IE 与 Netscape 的规范则被称为 DOMLevel 0 即 DOM0 。</p><h2 id="DOM0级事件"><a href="#DOM0级事件" class="headerlink" title="DOM0级事件"></a>DOM0级事件</h2><p>假设页面中存在一个 btn 的按钮，并且给 btn 添加一个点击事件</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'this is a click event'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件就是用户或浏览器自身执行的某种操作，如click、load、mouseover等，都是事件的名字，而响应某个事件的函数就被称为事件处理程序。</p><h3 id="click事件过程"><a href="#click事件过程" class="headerlink" title="click事件过程"></a>click事件过程</h3><p>在上述的例子中，click 事件并没有像其他函数一样，必须要调用才可以执行，click 事件并不确定什么时候发生，而当浏览器发现用户点击该按钮时，浏览器就检测<code>btn.onclick</code>是否有值，如果有，就会执行<code>btn.onclick.call(btn,event)</code>，此时函数执行，<code>call()</code> 方法接收两个参数，第一个指向调用当前方法的对象，也就是<code>this</code>。</p><p>需要注意的是，指定的 this 值并不一定是该函数执行时真正的this值，如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">非严格模式</a>下，则指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中就是window对象)，同时值为原始值(数字，字符串，布尔值)的 this 会指向该原始值的自动包装对象。</p><p>另一个参数则是事件对象 <code>event</code>，该对象也可以通过 <code>arguments[0]</code> 来访问，它包含了事件相关的所有信息，如本例子中，则包含了点击事件的全部信息。可以通过给函数传参来获取事件信息。</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'this is a click event'</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(e);  <span class="comment">//  事件对象  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在 IE 中，在使用 DOM0 级方法添加事件处理程序时，event 是作 window 对象的一个属性而存在的。此时访问事件对象需要通过 <code>window.event</code>。</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">window</span>.event);  <span class="comment">//  IE中事件对象    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 DOM0级中，如果想要实现一个对象绑定多个函数，可以这样实现。</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  fn1.call(<span class="keyword">this</span>,xxx);</span><br><span class="line">  fn2.call(<span class="keyword">this</span>.yyy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DOM2级事件"><a href="#DOM2级事件" class="headerlink" title="DOM2级事件"></a>DOM2级事件</h2><p>W3C 后来将 DOM1 升级为 DOM2，DOM2级规范开始尝试以一种符合逻辑的方式来标准化 DOM事件。DOM0级 可以认为 <code>onclick</code> 是 btn 的一个属性，DOM2级 则将属性升级为队列。</p><p>DOM2级 事件定义了两个方法，用于处理指定和删除事件处理程序的操作，<code>addEventListener()</code>和<code>removeEventListener()</code>，所有的 DOM 节点中都包含这两个方法，它们都接收 3 个参数。</p><ol><li><p>要处理的事件名</p></li><li><p>作为事件处理程序的函数</p></li><li><p>布尔值，true 代表在捕获阶段调用事件处理程序，false 表示在冒泡阶段调用事件处理程序，默认为 false。</p></li></ol><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//  do something</span></span><br><span class="line">&#125;)</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//  do something else</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>addEventListener()</code>将事件加入到监听队列中，当浏览器发现用户点击按钮时，click 队列中依次执行匿名函数1、匿名函数2。</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//  do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//  do something else</span></span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,fn1)</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,fn2)</span><br></pre></td></tr></table></figure><p>如果这样写，click 队列中依次<code>fn1.call(btn,event)</code>，<code>fn2.call(btn,event)</code>。</p><p>通过<code>addEventListener()</code>添加的事件只能由<code>removeEventListener()</code>来移除，并且<code>removeEventListener()</code>只能移除具名函数，不能移除匿名函数。</p><h2 id="IE-中-DOM2级事件"><a href="#IE-中-DOM2级事件" class="headerlink" title="IE 中 DOM2级事件"></a>IE 中 DOM2级事件</h2><p>IE8 及之前，实现类似<code>addEventListener()</code>和<code>removeEventListener()</code>的两个方法是<code>attachEvent()</code>和<code>detachEvent()</code>，这两个方法接受相同的两个参数。</p><ol><li><p>要处理的事件名</p></li><li><p>作为事件处理程序的函数</p></li></ol><p>IE8 之前的只支持事件冒泡，所以通过<code>attachEvent()</code>添加的事件处理程序只能添加到冒泡阶段。</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">btn.attachEvent(<span class="string">'click'</span>,fn1)</span><br><span class="line">btn.attachEvent(<span class="string">'click'</span>,fn2)</span><br></pre></td></tr></table></figure><p>当用户点击时，click 队列依次<code>fn1.call(undefined,undefined)</code>，<code>fn2.call(undefined,undefined)</code>。</p><p>类似的<code>detachEvent()</code>也只能移除具名函数，不能移除匿名函数。</p><p>兼容处理</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> btn.addEventListener === <span class="string">'function'</span>) &#123;</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, fn);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> btn.attachEvent === <span class="string">'function'</span>) &#123;</span><br><span class="line">  btn.attachEvent(<span class="string">'onclick'</span>, fn)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;button子元素在IE下无法触发点击事件&quot;&gt;&lt;a href=&quot;#button子元素在IE下无法触发点击事件&quot; class=&quot;headerlink&quot; title=&quot;button子元素在IE下无法触发点击事件&quot;&gt;&lt;/a&gt;button子元素在IE下无法触发点击事件&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>阿里云服务器Centos部署Koa2 + Mongodb + 爬虫实现小说阅读器后台</title>
    <link href="http://yoursite.com/2019/02/02/koa2%20in%20centos/"/>
    <id>http://yoursite.com/2019/02/02/koa2 in centos/</id>
    <published>2019-02-02T06:18:20.940Z</published>
    <updated>2019-02-02T06:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/02/02/hello-world/"/>
    <id>http://yoursite.com/2019/02/02/hello-world/</id>
    <published>2019-02-02T06:03:11.650Z</published>
    <updated>2017-10-28T00:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
